1. Общая структура

Код представляет собой серверное приложение на Go, построенное для взаимодействия с пользователями через веб-интерфейс и REST API. Основные компоненты:

    Работа с базой данных PostgreSQL.
    Авторизация и аутентификация с использованием JWT (JSON Web Tokens) и куки.
    Обработка HTML-шаблонов для представления данных.
    Реализация REST API для взаимодействия с клиентами (включая аутентификацию, управление пользователями, событиями).

2. Основные модули и функционал

    Работа с базой данных
        Используется PostgreSQL.
        Подключение к базе выполняется через стандартную библиотеку database/sql с использованием драйвера lib/pq.
        Основные запросы:
            Добавление новых пользователей и событий.
            Получение данных пользователей и событий.
            Проверка наличия учетных записей (по email).

    Аутентификация
        Используется JWT для проверки подлинности пользователей.
        Генерация токена происходит при успешной авторизации. Токен содержит идентификатор пользователя и срок действия (72 часа).
        Для хранения токена на клиенте используется cookie с настройкой HttpOnly.

    REST API
        Основные API-эндпоинты:
            /api/login: Авторизация пользователя и выдача токена.
            /api/userinfo: Получение информации о пользователе на основе токена.
            /api/profile: Получение профиля текущего пользователя.
            /api/apilogin: Авторизация через API с поддержкой токена в ответе.
        API-эндпоинты используют JSON для обмена данными.

    Обработка HTML-шаблонов
        Для генерации страниц используется стандартный пакет html/template.
        Поддерживаются маршруты для работы с веб-интерфейсом (например, страницы входа, регистрации, событий).

    События
        Функции для добавления новых событий (create_event).
        Страница для отображения событий (events).

3. REST API реализация

REST API в коде реализован с соблюдением базовых принципов:

    HTTP-методы: Используются методы GET и POST. Например, POST для аутентификации и отправки данных, GET для получения информации.
    Аутентификация: Проверка токена осуществляется через middleware validateToken, который добавляет информацию о текущем пользователе в контекст.
    JSON-формат: Обмен данными между сервером и клиентом осуществляется в формате JSON.
    Коды статуса HTTP: Используются для указания статуса запроса (200 OK, 401 Unauthorized, 500 Internal Server Error и др.).
    Логическая структура эндпоинтов:
        /api/login — для авторизации.
        /api/userinfo — для получения информации о текущем пользователе.
        /api/profile — для работы с профилем текущего пользователя.

4. Проблемы и улучшения

    Безопасность
        Нет проверки на повторное использование токенов. Стоит рассмотреть реализацию механизма "отзыва токенов".
        Пароли хранятся в базе данных только в хешированном виде, но в некоторых запросах (handleAPILogin) идет явная проверка хеша с паролем без bcrypt.CompareHashAndPassword.

    Ошибки
        Потенциальные ошибки не всегда логируются (например, ошибка при декодировании JSON в loginHandler).
        Повторяющиеся ошибки в подключении к базе данных внутри отдельных функций, вместо централизованного подхода.

    Качество кода
        Код сложно расширять из-за жесткой привязки функций к SQL-запросам. Можно использовать ORM (например, GORM) для упрощения работы с базой данных.
        Некоторые функции (user_reg) имеют неэффективную структуру: проверка существования email выполняется после вставки данных.
        В коде наблюдаются дублирующиеся части, например, одинаковые SQL-запросы.

    API-реализация
        Эндпоинты используют только два метода HTTP (GET и POST), но могли бы быть более семантически правильными (например, использование PUT для обновления).
        Нет обработки пагинации и фильтрации данных для списков (например, событий)


Функции для работы с HTTP-маршрутами
main

    Это точка входа приложения.
    Настраивает маршруты для обработки запросов (/api/login, /api/profile, и т. д.).
    Настраивает статический сервер для ресурсов и шаблонов.
    Запускает HTTP-сервер.

loginHandler(w http.ResponseWriter, r *http.Request)

    Обрабатывает POST-запросы на /api/login.
    Получает email и пароль из тела запроса.
    Проверяет, существует ли пользователь, и сверяет пароль.
    При успешной аутентификации генерирует JWT токен и отправляет его в ответе.

userHandler(w http.ResponseWriter, r *http.Request)

    Обрабатывает запросы на /api/userinfo.
    Проверяет токен пользователя.
    Если токен действителен, возвращает данные текущего пользователя.

profileHandler(w http.ResponseWriter, r *http.Request)

    Обрабатывает запросы на /api/profile.
    Проверяет токен, извлекает информацию о текущем пользователе и возвращает его профиль.

handleAPILogin(w http.ResponseWriter, r *http.Request)

    Это REST API-обработчик для логина.
    Валидирует учетные данные пользователя и возвращает токен в JSON-ответе.

eventsHandler(w http.ResponseWriter, r *http.Request)

    Обрабатывает маршруты для отображения страницы с событиями.
    Генерирует HTML-страницу на основе шаблона.

2. Функции для работы с базой данных
user_reg(username string, email string, password string) error

    Регистрирует нового пользователя.
    Сначала хеширует пароль с помощью bcrypt.
    Выполняет SQL-запрос на вставку данных о пользователе (имя, email, хеш пароля) в базу.

create_event(event_name string, userID int) error

    Добавляет новое событие в базу данных.
    Использует SQL-запрос для вставки данных о событии.

findUserByEmail(email string) (User, error)

    Проверяет, существует ли пользователь с данным email.
    Возвращает информацию о пользователе, если он найден.

getUserPasswordHash(email string) (string, error)

    Получает хеш пароля пользователя из базы данных по email.
    Используется для проверки пароля при логине.

3. Функции для аутентификации
generateJWT(userID int) (string, error)

    Создает JWT токен.
    Включает в токен информацию об идентификаторе пользователя и сроке действия (72 часа).
    Кодирует данные с использованием секретного ключа.

validateToken(token string) (int, error)

    Проверяет подлинность токена.
    Расшифровывает токен с использованием секретного ключа.
    Возвращает идентификатор пользователя, если токен действителен.

TokenValidMiddleware(next http.HandlerFunc) http.HandlerFunc

    Middleware для проверки токенов.
    Проверяет наличие токена в cookie или заголовке Authorization.
    Передает управление следующему обработчику, если токен действителен.

4. Вспомогательные функции
renderTemplate(w http.ResponseWriter, tmpl string, data interface{})

    Обрабатывает HTML-шаблоны.
    Генерирует страницу и отправляет ее пользователю.

hashAndSalt(password string) (string, error)

    Хеширует пароль с помощью bcrypt.
    Возвращает хеш для хранения в базе данных.

checkPasswordHash(password string, hash string) bool

    Проверяет, соответствует ли введенный пароль хешу из базы данных.

5. SQL-запросы

Встроенные SQL-запросы:

    INSERT: Используется в user_reg и create_event для добавления новых записей.
    SELECT: Используется в findUserByEmail, getUserPasswordHash для получения данных из базы.
